import React, { useState } from 'react';
import { Rnd } from 'react-rnd';
import { useForm, SubmitHandler } from 'react-hook-form';
import { TextField, Button } from '@material-ui/core';
import { AccessTime, Work, Home, School } from '@material-ui/icons';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

// Extend dayjs with plugins
dayjs.extend(utc);
dayjs.extend(timezone);

interface Shift {
    id: number;
    startTime: string;
    endTime: string;
    position: { x: number; y: number };
    size: { width: number; height: number };
    color: string;
    icon: React.ReactElement;
}

interface FormData {
    startTime: string;
    endTime: string;
}

interface ScheduleProps {
    timezone: string;
}

const Schedule: React.FC<ScheduleProps> = ({ timezone }) => {
    const [shifts, setShifts] = useState<Shift[]>([]);
    const { register, handleSubmit, formState: { errors } } = useForm<FormData>();

    const onAddShift: SubmitHandler<FormData> = data => {
        const newShift: Shift = {
            id: shifts.length,
            startTime: data.startTime,
            endTime: data.endTime,
            position: { x: calculateXPosition(data.startTime), y: 0 },
            size: { width: calculateWidth(data.startTime, data.endTime), height: 50 },
            color: getRandomColor(),
            icon: getRandomIcon()
        };
        setShifts([...shifts, newShift]);
    };

    const calculateWidth = (startTime: string, endTime: string): number => {
        const start = dayjs(startTime);
        const end = dayjs(endTime);
        const diff = end.diff(start, 'minute');
        return diff / 1440 * 100; // Percentage of the day
    };

    const calculateXPosition = (startTime: string): number => {
        const startOfDay = dayjs(startTime).startOf('day');
        const start = dayjs(startTime);
        const diff = start.diff(startOfDay, 'minute');
        return diff / 1440 * 100; // Percentage of the day
    };

    const calculateXPositionBasedOnDrag = (xPosition: number): number => {
        return xPosition / window.innerWidth * 100;
    };

    const calculateWidthBasedOnResize = (width: string): number => {
        const pixelWidth = parseFloat(width.replace('px', ''));
        return pixelWidth / window.innerWidth * 100;
    };

    const updateShift = (id: number, size: { width: number; height: number }, position: { x: number; y: number }) => {
        setShifts(shifts.map(shift => 
            shift.id === id ? { ...shift, size, position } : shift
        ));
    };

    const getRandomColor = () => {
        const colors = ['#FFCDD2', '#C8E6C9', '#BBDEFB', '#D1C4E9'];
        return colors[Math.floor(Math.random() * colors.length)];
    };

    const getRandomIcon = () => {
        const icons = [<AccessTime />, <Work />, <Home />, <School />];
        return icons[Math.floor(Math.random() * icons.length)];
    };

    return (
        <div style={{ position: 'relative', height: '100px', width: '100%', border: '1px solid black' }}>
            {/* Hourly and 15-Minute Lines here */}
            
            {shifts.map((shift, index) => (
                <Rnd
                    key={index}
                    size={{ width: `${shift.size.width}%`, height: 50 }}
                    position={{ x: `${shift.position.x}%`, y: 0 }}
                    onDragStop={(e, d) => {
                        const updatedPosition = calculateXPositionBasedOnDrag(d.x);
                        updateShift(shift.id, shift.size, { x: updatedPosition, y: 0 });
                    }}
                    onResizeStop={(e, direction, ref, delta, position) => {
                        const updatedWidth = calculateWidthBasedOnResize(ref.style.width);
                        updateShift(shift.id, { width: updatedWidth, height: 50 }, shift.position);
                    }}
                    style={{ backgroundColor: shift.color, display: 'flex', alignItems: 'center', justifyContent: 'center' }}
                >
                    {shift.icon}
                    <span>Shift: {shift.id}</span>
                </Rnd>
            ))}
            <div>

           
